
//List students and teachers for a given course.

SELECT `c`.name AS Course , 
	CONCAT(`t`.first_name, ' ', `t`.last_name) AS Teacher, 
	CONCAT(`s`.first_name, ' ', `s`.last_name) AS Student 
FROM `student` AS `s` 
	LEFT JOIN `student_course` AS `sc` ON (`s`.idstudent = `sc`.student) 
    LEFT JOIN `course` AS `c`  ON (`c`.idcourse = `sc`.course) 
	LEFT JOIN `teacher` AS `t` ON (`c`.teacher_assigned = `t`.idteacher) 
ORDER BY `s`.last_name ASC

Result of applying EXPLAIN:

+---+---+---+---+---+---+---+---+---+---+
| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |
+---+---+---+---+---+---+---+---+---+---+
| 1 | SIMPLE | s | ALL | NULL | NULL | NULL | NULL | 10 | Using filesort |
| 1 | SIMPLE | sc | ref | student | student | 4 | high-school.s.idstudent | 1 | Using index |
| 1 | SIMPLE | c | eq_ref | PRIMARY | PRIMARY | 4 | high-school.sc.course | 1 | Using where |
| 1 | SIMPLE | t | eq_ref | PRIMARY | PRIMARY | 4 | high-school.c.teacher_assigned | 1 | Using where |
+---+---+---+---+---+---+---+---+---+---+



//Percentage of students that passed a given course.

SELECT CONCAT( ROUND (
	         (SUM(IF (sc.final_note > 6,1,0 ) )/COUNT(sc.idstudent_course))*100), '%')
	        AS 'Percentage of Students that Passed the course'
 FROM `student_course` AS sc INNER JOIN `course` AS c ON (sc.course =c.idcourse)
 WHERE c.name = 'Services'
 
 Result of applying EXPLAIN:
 
 +---+---+---+---+---+---+---+---+---+---+
| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |
+---+---+---+---+---+---+---+---+---+---+
| 1 | SIMPLE | c | ALL | PRIMARY | NULL | NULL | NULL | 3 | Using where |
| 1 | SIMPLE | sc | ref | fk_idcourse | fk_idcourse | 4 | high-school.c.idcourse | 5 |  |
+---+---+---+---+---+---+---+---+---+---+



//Percentage of students that failed a given course.

SELECT CONCAT( ROUND (
             (SUM(IF (sc.final_note < 7,1,0 ) )/COUNT(sc.idstudent_course))*100), '%')
            AS 'Percentage of Students that Failed the course'
FROM `student_course` AS sc INNER JOIN `course` AS c ON (sc.course =c.idcourse) 
WHERE c.name = 'Services'

Result of applying EXPLAIN:

+---+---+---+---+---+---+---+---+---+---+
| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |
+---+---+---+---+---+---+---+---+---+---+
| 1 | SIMPLE | c | ALL | PRIMARY | NULL | NULL | NULL | 3 | Using where |
| 1 | SIMPLE | sc | ref | fk_idcourse | fk_idcourse | 4 | high-school.c.idcourse | 5 |  |
+---+---+---+---+---+---+---+---+---+---+



//For a given teacher, list the timeline for each course that he is assigned to (ordered by date), and the course name. 

SELECT 
	CONCAT(`t`.first_name, ' ', `t`.last_name) AS Teacher, 
	CONCAT(`st`.day, ' ', `st`.from_hour,' - ',`st`.to_hour, ': ',`c`.name) AS Schedule 
FROM `schedule_time` AS `st`
	RIGHT JOIN `course` AS `c` ON (`st`.course = `c`.idcourse) 
	RIGHT JOIN `teacher` AS `t` ON (`c`.teacher_assigned = `t`.idteacher ) 
WHERE `t`.last_name = 'Stewart' 
ORDER BY `st`.from_hour ASC

Result of applying EXPLAIN:

+---+---+---+---+---+---+---+---+---+---+
| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |
+---+---+---+---+---+---+---+---+---+---+
| 1 | SIMPLE | t | ALL | NULL | NULL | NULL | NULL | 2 | Using where; Using temporary; Using filesort |
| 1 | SIMPLE | c | ALL | teacher_assigned | NULL | NULL | NULL | 3 | Using where |
| 1 | SIMPLE | st | ref | fk_course | fk_course | 4 | high-school.c.idcourse | 1 | Using where |
+---+---+---+---+---+---+---+---+---+---+
